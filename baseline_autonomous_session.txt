
ANCESTRY PROJECT - COMPREHENSIVE TEST SUITE
============================================================

🧹 LINTER: Applying safe auto-fixes (W291/W292/W293/E401)...
🧹 LINTER: Enforcing critical blocking rules (E722,F821,F811,F823)...
🧹 LINTER: Repository diagnostics (non-blocking summary)...
 9	N803   	[ ] invalid-argument-name
 7	SIM116 	[ ] if-else-block-instead-of-dict-lookup
 6	I001   	[*] unsorted-imports
 5	RET503 	[*] implicit-return
 5	SIM103 	[*] needless-bool
 5	SIM117 	[ ] multiple-with-statements
 5	N815   	[ ] mixed-case-variable-in-class-scope
 4	PTH120 	[ ] os-path-dirname
 4	PTH123 	[ ] builtin-open
 4	E731   	[*] lambda-assignment
 4	PLW2901	[ ] redefined-loop-name
 3	SIM108 	[*] if-else-block-instead-of-if-exp
 3	SIM114 	[*] if-with-same-arms
 3	PTH100 	[ ] os-path-abspath
 3	F841   	[*] unused-variable
 2	B011   	[*] assert-false
 2	N812   	[ ] lowercase-imported-as-non-lowercase
 1	B007   	[ ] unused-loop-control-variable
 1	B023   	[ ] function-uses-loop-variable
 1	N802   	[ ] invalid-function-name
 1	N818   	[ ] error-suffix-on-exception-name
 1	PLR5501	[*] collapsible-else-if
 1	PLW0602	[ ] global-variable-not-assigned
 1	RUF001 	[ ] ambiguous-unicode-character-string
[*] fixable with `ruff check --fix`
🔍 QUALITY: Running Python best practices checks...
✅ action10.py: Quality score 89.2/100
✅ action11.py: Quality score 94.6/100
✅ utils.py: Quality score 100.0/100
✅ main.py: Quality score 83.5/100
✅ code_quality_checker.py: Quality score 100.0/100
📊 Average quality score: 93.5/100
📊 Found 62 test modules (62 with enhanced descriptions)

============================================================
🧪 RUNNING TESTS
============================================================
🔄 Running tests sequentially...

🧪 [ 1/62] Testing: action10.py
   📝 GEDCOM Analysis & Advanced Genealogical Intelligence Engine
   ✅ PASSED | Duration: 50.74s | 5 tests | Quality: 89.2/100 📊 (2 issues)
   🔍 Quality Issues:
      Length: 1 issue(s)
        • action10_module_tests: is too long (917 lines)
      Complexity: 1 issue(s)
        • action10_module_tests: is too complex (complexity: 49)

🧪 [ 2/62] Testing: action11.py
   📝 Action 11: Ancestry API Search and Family Analysis
   ✅ PASSED | Duration: 1.31s | 3 tests | Quality: 94.6/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • action11_module_tests: is too complex (complexity: 16)

🧪 [ 3/62] Testing: action6_gather.py
   📝 - Gather DNA Matches from Ancestry
   ✅ PASSED | Duration: 1.12s | 7 tests | Quality: 28.7/100 ⚠️ (13 issues)
   🔍 Quality Issues:
      Complexity: 5 issue(s)
        • _main_page_processing_loop: is too complex (complexity: 12)
        • _prepare_bulk_db_data: is too complex (complexity: 11)
      ... and 8 more issues

🧪 [ 4/62] Testing: action7_inbox.py
   📝 Intelligent Inbox Processing & AI-Powered Message Classification
   ✅ PASSED | Duration: 2.97s | 4 tests | Quality: 77.4/100 📊 (4 issues)
   🔍 Quality Issues:
      Complexity: 4 issue(s)
        • _get_all_conversations_api: is too complex (complexity: 12)
        • _determine_fetch_need: is too complex (complexity: 13)

🧪 [ 5/62] Testing: action8_messaging.py
   📝 Intelligent Messaging Automation & Personalization Engine
   ✅ PASSED | Duration: 1.57s | 3 tests | Quality: 73.5/100 📊 (5 issues)
   🔍 Quality Issues:
      Complexity: 4 issue(s)
        • _process_single_candidate_iteration: is too complex (complexity: 11)
        • action8_messaging_tests: is too complex (complexity: 26)
      Length: 1 issue(s)
        • action8_messaging_tests: is too long (537 lines)

🧪 [ 6/62] Testing: action9_process_productive.py
   📝 Action 9: Productive DNA Match Processing
   ✅ PASSED | Duration: 3.47s | 8 tests | Quality: 57.2/100 ⚠️ (7 issues)
   🔍 Quality Issues:
      Type Hints: 3 issue(s)
        • __post_init__: missing type hints
        • __post_init__: missing type hints
      Complexity: 2 issue(s)
        • _create_ms_tasks: is too complex (complexity: 11)
        • _stage_database_updates: is too complex (complexity: 11)
      ... and 2 more issues

🧪 [ 7/62] Testing: adaptive_rate_limiter.py
   📝 Adaptive Rate Limiting & Intelligent API Throttling Engine
   ✅ PASSED | Duration: 0.24s | 4 tests | Quality: 94.1/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • test_regression_prevention_rate_limiter_caching: is too complex (complexity: 11)

🧪 [ 8/62] Testing: ai_interface.py
   📝 AI Intelligence & Genealogical Content Analysis Engine
   ✅ PASSED | Duration: 2.43s | 10 tests | Quality: 75.9/100 📊 (4 issues)
   🔍 Quality Issues:
      Complexity: 4 issue(s)
        • test_configuration: is too complex (complexity: 12)
        • test_prompt_loading: is too complex (complexity: 11)

🧪 [ 9/62] Testing: ai_prompt_utils.py
   📝 AI Prompt Management - Dynamic Prompt Configuration
   ✅ PASSED | Duration: 0.20s | 6 tests | Quality: 100.0/100 ✅

🧪 [10/62] Testing: api_search_utils.py
   📝 API Search Utilities - Ancestry API Search and Retrieval
   ✅ PASSED | Duration: 1.61s | 6 tests | Quality: 88.5/100 📊 (2 issues)
   🔍 Quality Issues:
      Complexity: 2 issue(s)
        • _parse_lifespan: is too complex (complexity: 11)
        • get_api_relationship_path: is too complex (complexity: 11)

🧪 [11/62] Testing: api_utils.py
   📝 API Intelligence & Request Orchestration Engine
   ✅ PASSED | Duration: 1.14s | 18 tests | Quality: 34.8/100 ⚠️ (12 issues)
   🔍 Quality Issues:
      Complexity: 5 issue(s)
        • _extract_event_from_api_details: is too complex (complexity: 13)
        • call_suggest_api: is too complex (complexity: 12)
      ... and 7 more issues

🧪 [12/62] Testing: cache.py
   📝 High-Performance Disk Caching & Intelligent Data Management Engine
   ✅ PASSED | Duration: 0.78s | 11 tests | Quality: 82.0/100 📊 (3 issues)
   🔍 Quality Issues:
      Complexity: 2 issue(s)
        • enforce_cache_size_limit: is too complex (complexity: 11)
        • cache_module_tests: is too complex (complexity: 15)
      Type Hints: 1 issue(s)
        • __init__: missing type hints

🧪 [13/62] Testing: cache_manager.py
   📝 Centralized Cache Management & Intelligent Coordination Engine
   ✅ PASSED | Duration: 0.31s | 21 tests | Quality: 100.0/100 ✅

🧪 [14/62] Testing: chromedriver.py
   📝 Management & Browser Automation Engine
   ✅ PASSED | Duration: 0.64s | 5 tests | Quality: 100.0/100 ✅

🧪 [15/62] Testing: code_quality_checker.py
   📝 Code Quality Checker & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 2.32s | 2 tests | Quality: 100.0/100 ✅

🧪 [16/62] Testing: config.py
   📝 uration Management & Environment Orchestration Engine
   ✅ PASSED | Duration: 0.30s | 5 tests | Quality: 88.3/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • config_module_tests: is too complex (complexity: 11)

🧪 [17/62] Testing: config\config_manager.py
   📝 Enhanced Configuration Manager.
   ✅ PASSED | Duration: 0.40s | 10 tests | Quality: 75.0/100 📊 (4 issues)
   🔍 Quality Issues:
      Complexity: 4 issue(s)
        • config_manager_module_tests: is too complex (complexity: 11)
        • validate_system_requirements: is too complex (complexity: 11)

🧪 [18/62] Testing: config\config_schema.py
   📝 Configuration Schema Definitions.
   ✅ PASSED | Duration: 0.27s | 17 tests | Quality: 87.8/100 📊 (2 issues)
   🔍 Quality Issues:
      Complexity: 2 issue(s)
        • _test_rate_limiting_configuration: is too complex (complexity: 11)
        • validate: is too complex (complexity: 16)

🧪 [19/62] Testing: config\credential_manager.py
   📝 Enhanced Credential Manager.
   ✅ PASSED | Duration: 0.39s | 15 tests | Quality: 80.8/100 📊 (3 issues)
   🔍 Quality Issues:
      Length: 1 issue(s)
        • credential_manager_module_tests: is too long (615 lines)
      Complexity: 1 issue(s)
        • credential_manager_module_tests: is too complex (complexity: 17)
      Type Hints: 1 issue(s)
        • __enter__: missing type hints

🧪 [20/62] Testing: core\api_manager.py
   📝 API Manager - Handles API interactions and user identifiers.
   ✅ PASSED | Duration: 0.42s | 7 tests | Quality: 100.0/100 ✅

🧪 [21/62] Testing: core\browser_manager.py
   📝 Browser Manager - Handles all browser/WebDriver operations.
   ✅ PASSED | Duration: 0.78s | 10 tests | Quality: 89.7/100 📊 (1 issues)
   🔍 Quality Issues:
      Type Hints: 1 issue(s)
        • __init__: missing type hints

🧪 [22/62] Testing: core\database_manager.py
   📝 Database Manager - Handles all database-related operations.
   ✅ PASSED | Duration: 1.08s | 8 tests | Quality: 87.1/100 📊 (2 issues)
   🔍 Quality Issues:
      Complexity: 2 issue(s)
        • _initialize_engine_and_session: is too complex (complexity: 13)
        • get_session_context: is too complex (complexity: 13)

🧪 [23/62] Testing: core\dependency_injection.py
   📝 Dependency Injection Framework.
   ✅ PASSED | Duration: 0.88s | 24 tests | Quality: 100.0/100 ✅

🧪 [24/62] Testing: core\error_handling.py
   📝 Standardized Error Handling Framework.
   ✅ PASSED | Duration: 0.20s | 6 tests | Quality: 81.7/100 📊 (3 issues)
   🔍 Quality Issues:
      Type Hints: 3 issue(s)
        • network_error_func: missing type hints
        • timeout_handler: missing type hints

🧪 [25/62] Testing: core\logging_utils.py
   📝 Centralized Logging Utilities.
   ✅ PASSED | Duration: 0.19s | 8 tests | Quality: 93.2/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • logging_utils_module_tests: is too complex (complexity: 14)

🧪 [26/62] Testing: core\session_manager.py
   📝 Session Management & Resource Orchestration Engine
   ✅ PASSED | Duration: 1.72s | 15 tests | Quality: 44.7/100 ⚠️ (10 issues)
   🔍 Quality Issues:
      Complexity: 2 issue(s)
        • session_manager_module_tests: is too complex (complexity: 14)
        • _sync_cookies: is too complex (complexity: 13)
      Type Hints: 3 issue(s)
        • my_profile_id: missing type hints
        • scraper: missing type hints
      ... and 5 more issues

🧪 [27/62] Testing: core\session_validator.py
   📝 Session Validator - Handles session validation and readiness checks.
   ✅ PASSED | Duration: 0.20s | 9 tests | Quality: 93.1/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • perform_readiness_checks: is too complex (complexity: 13)

🧪 [28/62] Testing: core_imports.py
   📝 Core Import System - Unified Module and Function Registry
   ✅ PASSED | Duration: 0.08s | Unknown | Quality: 100.0/100 ✅

🧪 [29/62] Testing: credentials.py
   📝 Unified Credential Management & Enterprise Security Engine
   ✅ PASSED | Duration: 0.42s | 11 tests | Quality: 48.1/100 ⚠️ (8 issues)
   🔍 Quality Issues:
      Complexity: 5 issue(s)
        • credentials_module_tests: is too complex (complexity: 13)
        • main: is too complex (complexity: 16)
      ... and 3 more issues

🧪 [30/62] Testing: database.py
   📝 - SQLAlchemy Models, Database Utilities, and Schema Management
   ✅ PASSED | Duration: 0.92s | 13 tests | Quality: 49.2/100 ⚠️ (9 issues)
   🔍 Quality Issues:
      Complexity: 5 issue(s)
        • _compare_field_values: is too complex (complexity: 12)
        • create_or_update_family_tree: is too complex (complexity: 14)
      ... and 4 more issues

🧪 [31/62] Testing: dna_gedcom_crossref.py
   📝 DNA-GEDCOM Cross-Reference Intelligence & Advanced Genealogical Integration Engine
   ✅ PASSED | Duration: 0.25s | 5 tests | Quality: 100.0/100 ✅

🧪 [32/62] Testing: extraction_quality.py
   📝 Extraction Quality & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.17s | 7 tests | Quality: 93.4/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • compute_task_quality: is too complex (complexity: 17)

🧪 [33/62] Testing: gedcom_ai_integration.py
   📝 Gedcom Ai Integration & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.18s | 5 tests | Quality: 100.0/100 ✅

🧪 [34/62] Testing: gedcom_cache.py
   📝 GEDCOM Cache Intelligence & Advanced Genealogical Data Optimization Engine
   ✅ PASSED | Duration: 0.32s | 13 tests | Quality: 88.1/100 📊 (2 issues)
   🔍 Quality Issues:
      Complexity: 2 issue(s)
        • load_gedcom_with_aggressive_caching: is too complex (complexity: 11)
        • get_health_status: is too complex (complexity: 11)

🧪 [35/62] Testing: gedcom_intelligence.py
   📝 Gedcom Intelligence & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.20s | 4 tests | Quality: 100.0/100 ✅

🧪 [36/62] Testing: gedcom_search_utils.py
   📝 GEDCOM Search Intelligence & Advanced Genealogical Discovery Engine
   ✅ PASSED | Duration: 1.00s | 12 tests | Quality: 100.0/100 ✅

🧪 [37/62] Testing: gedcom_utils.py
   📝 GEDCOM Processing & Genealogical Data Intelligence Engine
   ✅ PASSED | Duration: 0.71s | 6 tests | Quality: 56.5/100 ⚠️ (8 issues)
   🔍 Quality Issues:
      Complexity: 5 issue(s)
        • _get_full_name: is too complex (complexity: 11)
        • _check_relationship_type: is too complex (complexity: 23)
      ... and 3 more issues

🧪 [38/62] Testing: genealogical_normalization.py
   📝 Genealogical Normalization & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.17s | 7 tests | Quality: 100.0/100 ✅

🧪 [39/62] Testing: genealogical_task_templates.py
   📝 Genealogical Research Task Intelligence & Advanced Workflow Automation Engine
   ✅ PASSED | Duration: 0.18s | 17 tests | Quality: 88.2/100 📊 (2 issues)
   🔍 Quality Issues:
      Length: 1 issue(s)
        • genealogical_task_templates_module_tests: is too long (485 lines)
      Complexity: 1 issue(s)
        • genealogical_task_templates_module_tests: is too complex (complexity: 19)

🧪 [40/62] Testing: health_monitor.py
   📝 Comprehensive Health Monitoring & Intelligent System Diagnostics Engine
   ✅ PASSED | Duration: 0.25s | Unknown | Quality: 94.5/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • restore_from_checkpoint: is too complex (complexity: 14)

🧪 [41/62] Testing: logging_config.py
   📝 Centralized Logging Configuration & Intelligent Log Management Engine
   ✅ PASSED | Duration: 0.20s | 3 tests | Quality: 93.3/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • format: is too complex (complexity: 11)

🧪 [42/62] Testing: memory_utils.py
   📝 Memory Utilities - Lightweight memory management utilities.
   ✅ PASSED | Duration: 0.06s | Unknown | Quality: 100.0/100 ✅

🧪 [43/62] Testing: message_personalization.py
   📝 Intelligent Messaging & Communication Automation Engine
   ✅ PASSED | Duration: 1.03s | 4 tests | Quality: 82.2/100 📊 (3 issues)
   🔍 Quality Issues:
      Complexity: 2 issue(s)
        • _create_occupation_social_context: is too complex (complexity: 13)
        • _create_generational_gap_analysis: is too complex (complexity: 12)
      Type Hints: 1 issue(s)
        • __init__: missing type hints

🧪 [44/62] Testing: ms_graph_utils.py
   📝 Advanced Utility & Intelligent Service Engine
   ✅ PASSED | Duration: 1.25s | 6 tests | Quality: 74.1/100 📊 (3 issues)
   🔍 Quality Issues:
      Complexity: 3 issue(s)
        • acquire_token_device_flow: is too complex (complexity: 14)
        • get_todo_list_id: is too complex (complexity: 14)

🧪 [45/62] Testing: my_selectors.py
   📝 My Selectors & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.13s | 10 tests | Quality: 100.0/100 ✅

🧪 [46/62] Testing: performance_cache.py
   📝 Performance Intelligence & Advanced System Optimization Engine
   ✅ PASSED | Duration: 0.18s | 8 tests | Quality: 100.0/100 ✅

🧪 [47/62] Testing: performance_dashboard.py
   📝 Performance Intelligence & Advanced System Optimization Engine
   ✅ PASSED | Duration: 0.17s | 4 tests | Quality: 100.0/100 ✅

🧪 [48/62] Testing: performance_monitor.py
   📝 Performance Intelligence & System Optimization Engine
   ✅ PASSED | Duration: 5.22s | 12 tests | Quality: 100.0/100 ✅

🧪 [49/62] Testing: performance_orchestrator.py
   📝 Performance Intelligence & Advanced System Optimization Engine
   ✅ PASSED | Duration: 0.15s | 12 tests | Quality: 100.0/100 ✅

🧪 [50/62] Testing: performance_validation.py
   📝 Performance Intelligence & Advanced System Optimization Engine
   ✅ PASSED | Duration: 0.37s | 11 tests | Quality: 100.0/100 ✅

🧪 [51/62] Testing: person_search.py
   📝 Advanced Utility & Intelligent Service Engine
   ✅ PASSED | Duration: 0.68s | 14 tests | Quality: 100.0/100 ✅

🧪 [52/62] Testing: prompt_telemetry.py
   📝 Prompt Telemetry & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.23s | 3 tests | Quality: 100.0/100 ✅

🧪 [53/62] Testing: quality_regression_gate.py
   📝 Quality Regression Gate & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.17s | 2 tests | Quality: 100.0/100 ✅

🧪 [54/62] Testing: relationship_utils.py
   📝 Advanced Utility & Intelligent Service Engine
   ✅ PASSED | Duration: 0.60s | 10 tests | Quality: 72.2/100 📊 (5 issues)
   🔍 Quality Issues:
      Complexity: 5 issue(s)
        • _determine_gedcom_relationship: is too complex (complexity: 12)
        • _parse_discovery_relationship: is too complex (complexity: 12)

🧪 [55/62] Testing: research_prioritization.py
   📝 Advanced Utility & Intelligent Service Engine
   ✅ PASSED | Duration: 0.18s | 4 tests | Quality: 94.3/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • _calculate_conflict_priority_score: is too complex (complexity: 14)

🧪 [56/62] Testing: security_manager.py
   📝 Security Manager & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.55s | 11 tests | Quality: 94.0/100 📊 (1 issues)
   🔍 Quality Issues:
      Length: 1 issue(s)
        • security_manager_module_tests: is too long (485 lines)

🧪 [57/62] Testing: selenium_utils.py
   📝 Advanced Utility & Intelligent Service Engine
   ✅ PASSED | Duration: 0.49s | 10 tests | Quality: 100.0/100 ✅

🧪 [58/62] Testing: standard_imports.py
   📝 Standard Imports & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.16s | 9 tests | Quality: 100.0/100 ✅

🧪 [59/62] Testing: test_framework.py
   📝 Comprehensive Testing Infrastructure & Quality Assurance Engine
   ✅ PASSED | Duration: 0.17s | 3 tests | Quality: 100.0/100 ✅

🧪 [60/62] Testing: test_utilities.py
   📝 Centralized Testing Utilities & DRY Implementation Engine
   ✅ PASSED | Duration: 0.07s | Unknown | Quality: 100.0/100 ✅

🧪 [61/62] Testing: universal_scoring.py
   📝 Universal Scoring & Advanced System Intelligence Engine
   ✅ PASSED | Duration: 0.55s | Unknown | Quality: 90.0/100 📊 (1 issues)
   🔍 Quality Issues:
      Complexity: 1 issue(s)
        • validate_search_criteria: is too complex (complexity: 12)

🧪 [62/62] Testing: utils.py
   📝 - Core Session Management, API Requests, General Utilities
   ✅ PASSED | Duration: 0.96s | 5 tests | Quality: 100.0/100 ✅

============================================================
📊 FINAL TEST SUMMARY
============================================================
⏰ Duration: 97.5s
🧪 Total Tests Run: 488
✅ Passed: 62
❌ Failed: 0
📈 Success Rate: 100.0%

📋 RESULTS BY CATEGORY:
   Enhanced Modules: 62 passed, 0 failed
   Standard Modules: 0 passed, 0 failed

🎉 ALL 62 MODULES PASSED!
   Professional testing framework with 62 standardized modules complete.

